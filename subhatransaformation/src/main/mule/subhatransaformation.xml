<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">
	<http:listener-config name="HTTP_Listener_config" doc:name="HTTP Listener config" doc:id="8da06543-bc3c-4a5b-ad0f-fde0b6ddba66" >
		<http:listener-connection host="0.0.0.0" port="8081" />
	</http:listener-config>
	<flow name="subhatransaformationFlow" doc:id="243023b5-b425-4eb9-a1e3-b60386c9f809" >
		<http:listener doc:name="Listener" doc:id="d38bfcee-c1ab-4358-b2f2-d1f1b145959b" config-ref="HTTP_Listener_config" path="/simpleTransformation"/>
		<logger level="INFO" doc:name="Logger" doc:id="b34d68e3-6cac-49c8-8c41-ccd45bafa2a5" message="payload before transformation.... #[payload]"/>
		<ee:transform doc:name="Transform Message" doc:id="ff93dc33-a6e7-4916-8429-ff369351de10" >
			<ee:message >
				<ee:set-payload resource="product.dwl" />
			</ee:message>
			<ee:variables >
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="ac8198ab-8778-4671-be8e-ad6f6cd0466e" message="payload after transformation.... #[payload]"/>
	</flow>
	<flow name="datefunction" doc:id="e19d8f0e-0bdf-42a3-9bdd-dfe76689e2fc" >
		<http:listener doc:name="Listener" doc:id="e1853bdd-56e7-4a02-bd86-31d5349b908e" config-ref="HTTP_Listener_config" path="/datefunction"/>
		<ee:transform doc:name="Transform Message" doc:id="89e81bff-926a-4b72-90da-07f8c7877fdf" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="arrayWithObject" doc:id="2fc3ec9d-562c-48b0-91a5-959ae9d1cae2" >
		<http:listener doc:name="Listener" doc:id="104801b9-d274-42e9-9688-bcccb1164bb3" config-ref="HTTP_Listener_config" path="/arraywithObjects"/>
		<ee:transform doc:name="Transform Message" doc:id="374fbf19-baef-4482-bba0-770a919b17fd" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var numbersarray=[1,2,3]
var numbersarray2=[1,2,3]
var object1={	"productid":1001,
	"pname":"Dell",
	"discount":100
}
var object2={
	"productid":1001,
	"pname":"Dell",
	"discount":100,
	"productid":1002,
	pname:"Dell",
	discount:200
}
//var discountedprice=10
var discountedprice=20
fun gettotalpric(price)=price-discountedprice
---

[
	newprice:gettotalpric(100),
using (disicont=15){
	
	(object1),
	(object2),
	object:{
        (object1),
        (object2),
productid:2001,
pname:"dell",
discount:gettotalpric(disicont)
},
array:numbersarray+(object2),
//objects:(object1)+(object2)--wont work
objectslist:(object1)++(object2) ,//will work
objects:numbersarray++ (numbersarray),
//numbersarray:numbersarray++ (object1),--wont work
numberswithliter:numbersarray+200
},
numbersarray+object1,
numbersarray-3,
objects:{   
	++:    (object1)++(object2),
    --:    (object2)--(object1)
    
}
]
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="mapfunction" doc:id="fb6b7641-7b17-46a1-9ca2-f3cf241896a9" >
		<http:listener doc:name="Listener" doc:id="5fb62ef3-030d-462b-966c-216cc968d3e0" config-ref="HTTP_Listener_config" path="/mapfunction"/>
		<ee:transform doc:name="Transform Message" doc:id="96bd5692-edea-4690-af76-44b096d23852">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/xml  


 //var currency=lookup('lookupfunctionflow','us')
---

products:
{(payload map(prodv,prodindex)->
	{
	product:
	{
		pid:prodv.productId,
		pname:prodv.productName,
		//price:convertedprice,
		poffer:
		    {
		    	pofferpricwithoutlookup:prodv.offer.offerPrice,
			pofferpric:(prodv.offer.offerPrice) * 76 ,
			poffervalid:prodv.offer.offerValid
		    },
		(imageslist:
		{
		  (prodv.images map(imgval,imgindex)  ->
			{
				images:imgval  
			} 
		  ) 
	    })if(prodv.images !=null) 
		
		
	 }
	
	})
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="mapObject" doc:id="5c80bec5-8e23-4899-b933-1a9a1ea28d85" >
		<http:listener doc:name="Listener" doc:id="f05a00f5-20cd-480b-bc73-cadce63141a6" config-ref="HTTP_Listener_config" path="/mapObject"/>
		<ee:transform doc:name="Transform Message" doc:id="04f302f1-9da3-4dd4-9eeb-d6e9561a1cfd" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload map(val,key)->
{
	(
		val mapObject(val,key,index)->
{
	(key):val
}
	)

}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="arrayModuleFunctions" doc:id="6c4b6426-876c-4fad-91cb-968c17c7db9d" >
		<http:listener doc:name="Listener" doc:id="bcc63544-6fa2-4913-be5e-0d3b46e99841" config-ref="HTTP_Listener_config" path="/arrayModuleFunctions"/>
		<ee:transform doc:name="Transform Message" doc:id="229ec415-fe9c-4fd0-9e24-3763a3625a46" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
import * from dw::core::Arrays
---
[
somefun:payload.productId some($>2000),
dvfun:payload.productId divideBy(2),
payload map
{
	($$):$
},
payload map(value,key)->
{
	(key):value
}

]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="filteroper" doc:id="6c408fdc-b730-4d1e-9a56-e54b5bc7e430" >
		<http:listener doc:name="Listener" doc:id="08c59141-7166-42f6-92d0-9184eaba344d" config-ref="HTTP_Listener_config" path="/filteroperation" />
		<ee:transform doc:name="Copy_of_Transform Message" doc:id="5ed20993-d486-4855-a516-02a82c8222ca" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var proddata={
		"productId": 1001,
		"productName": "Dell Studio",
		"brand": "DELL",
		"originalPrice": 1000}
		
---

//payload orderBy -$.brand,
//payload distinctBy($.brand)

//payload groupBy($.brand)

(payload filter $.brand=="HP")
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
